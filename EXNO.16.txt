16 .)
//MINI PROJECT --- STUDENT MANAGEMENT SYSTEM USING CPP (UNFINISHED) 
//MODIFICATION IS ON PROGRESS 


#include <iostream>
#include <map>
#include <algorithm>
#include <vector>
using namespace std;
class Student 
{
public:
    string name;
    string branch;
    string phoneNumber;
    int semester;
    string gender;
    double cgp;
    string registrationNumber;

public:
    Student(string name, string branch, string phoneNumber, int semester, string gender, double cgp, string registrationNumber)
        : name(name), branch(branch), phoneNumber(phoneNumber), semester(semester), gender(gender), cgp(cgp), registrationNumber(registrationNumber) {}
    //getters and setters
    string getphoneNumber(){return phoneNumber;}
    string getName() { return name; }
    string getBranch() { return branch; }
    int getSemester() { return semester; }
    string getGender() { return gender; }
    double getCgp() { return cgp; }
    string getregistrationNumber(){return registrationNumber;}
    virtual void print() 
    {
        cout << name << " " << branch << " " << phoneNumber << " " << semester << " " << gender << " " << cgp << endl;
    }
};
class StudentAdditionalData : public Student {
  public:
    float height;
    float weight;
    //string registrationNumber;

    StudentAdditionalData(string name, string branch, string phone, int semester, string gender, float cgp, float height, float weight, string registrationNumber)
        : Student(name, branch, phone, semester, gender, cgp,registrationNumber)
        {
        this->height=height; 
        this->weight=weight;
        }
    
    void print() override 
    {
        Student::print();
        cout << height << " " << weight << " " << registrationNumber << endl;
    }
};

class StudentNormal : public Student {
public:
    StudentNormal(string name, string branch, string phoneNumber, int semester, string gender, double cgp, string registrationNumber)
        : Student(name, branch, phoneNumber, semester, gender, cgp, registrationNumber) {}
    //overriding the print method to print the details of normal student
    void print() {
        cout << name << " " << registrationNumber << " " << branch << " " << phoneNumber << " " << semester << " " << gender << " " << cgp << endl;
    }
};
class StudentMgmtUtil 
{
private:
    map<string, vector<StudentNormal*>> normalStudents;
    map<string, vector<StudentAdditionalData*>> additionalDataStudents;
    //function to sort students by semester and name
    static bool compareStudents(Student* a, Student* b) 
    {
        if (a->getSemester() == b->getSemester())
        {
            return a->getName() < b->getName();
        }
        return a->getSemester() < b->getSemester();
    }
public:
   void addBranch(string branch, int type) {
        if (type == 0) 
        {
            normalStudents[branch] = vector<StudentNormal*>();
        } else {
            additionalDataStudents[branch] = vector<StudentAdditionalData*>();
        }
    }
    //function to add normal student
    void addNormalStudent(string name, string branch, string phoneNumber, int semester, string gender, double cgp, string registrationNumber) {
        normalStudents[branch].push_back(new StudentNormal(name, branch, phoneNumber, semester, gender, cgp, registrationNumber));//object creation along with inputting values in map
    }
    //function to add additional data student
    void addAdditionalDataStudent(string name, string branch, string phoneNumber, int semester, string gender, double cgp, string registrationNumber, float height, float weight) {
        additionalDataStudents[branch].push_back(new StudentAdditionalData(name, branch, phoneNumber, semester, gender, cgp, height, weight,registrationNumber));
    }
    //function to list students of a particular branch based on gender
    void listByGender(string branch, string gender) {
        vector<StudentNormal*> normalStudentsByBranch = normalStudents[branch];
        vector<StudentAdditionalData*> additionalStudentsByBranch = additionalDataStudents[branch];
        vector<Student*> students;
        //adding normal students of the given branch
        for (auto i : normalStudentsByBranch) {
            if (i->getGender() == gender) {
                students.push_back(i);
            }
        }
        //adding additional data students of the given branch
        for (auto i : additionalStudentsByBranch) {
            if (i->getGender() == gender) {
                students.push_back(i);
            }
        }
        sort(students.begin(), students.end(), compareStudents);
        for (auto i : students) {
            i->print();
        }
        cout << "END" << endl;
    }
    //function to list all students
    void listAll() 
    {
    vector<Student*> students;
    //looping through normal students
    for (auto i : normalStudents) {
        for (auto j : i.second) {
            students.push_back(j);
        }
    }
    //looping through additional data students
    for (auto i : additionalDataStudents) {
        for (auto j : i.second) {
            students.push_back(j);
        }
    }
    sort(students.begin(), students.end(), compareStudents);
    for (auto i : students) {
        i->print();
    }
}
};
int main() {
    StudentMgmtUtil smu;
    int n;
    cin >> n; //number of branch
    for (int i = 0; i < n; i++) {
        string branch;
        int flag; //for extra info 
        cin >> branch >> flag;
        smu.addBranch(branch, flag);
    }
    int q; //number of loops
    cin >> q;
    for (int i = 0; i < q; i++) {
        string query;
        cin >> query;
        if (query == "ADD") {
            string name, branch, phone, gender,regno;
            int sem;
            float cgp;
            cin >> name >> branch >> phone >> sem >> gender >> cgp>>regno;
            smu.addNormalStudent(name, branch, phone, sem, gender, cgp,regno); //normal 


        } else if (query == "GLD") {
            string branch, gender;
            cin >> branch >> gender;
            smu.listByGender(branch, gender);
        } else if (query == "L") {
            smu.listAll();
        }
    }
    return 0;
}



